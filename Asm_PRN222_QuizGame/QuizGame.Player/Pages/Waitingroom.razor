@page "/waitingroom"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.SignalR.Client
@using QuizGame.Service.BusinessModel
@using QuizGame.Service.Interface
@inject NavigationManager Navigation
@inject IPlayerService PlayerService
@inject ProtectedSessionStorage SessionStorage

<h3>Waiting Room</h3>
@if (!string.IsNullOrEmpty(notifyMessage))
{
    <div class="alert alert-info">
        @notifyMessage
    </div>
}
<div class="container">
    <div class="row">
        <div class="col">
            <div class="alert alert-info">
                <p class="mb-0">Welcome, @playerName! You are waiting for the game to start.</p>
                @if (teamName != string.Empty)
                {
                    <p class="mb-0">You are in team: <strong>@teamName</strong></p>
                }
                else
                {
                    <p class="mb-0 text-danger">You haven't joined a team yet!</p>
                }
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Current Players</h5>
                </div>
                <div class="card-body">
                    <ul class="list-group">
                        @foreach (var player in playersInGame_temp)
                        {
                            <li class="list-group-item">@player.PlayerName</li>
                        }
                    </ul>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Teams</h5>
                </div>
                <div class="card-body">
                    <ul class="list-group">
                        @foreach (var team in teams)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                @team.TeamName
                                <span class="badge bg-primary rounded-pill">@team.MemberCount players</span>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col text-center">
            @if (string.IsNullOrEmpty(teamName))
            {
                <button @onclick="JoinTeam" class="btn btn-primary">Join a Team</button>
            }
            else
            {
                <button @onclick="ChangeTeam" class="btn btn-outline-primary">Change Team</button>
            }
        </div>
    </div>
</div>

@code {
    private string playerName = string.Empty;
    private string gamePin = string.Empty;
    private string teamName = string.Empty;
    private int teamId = 0;
    private HubConnection? hubConnection;
    private List<string> playersInGame = new List<string>();
    private List<PlayerModel> playersInGame_temp = new List<PlayerModel>();
    private List<Repository.Models.TeamModel> teams = new List<Repository.Models.TeamModel>();
    private bool isConnected = false;
    private string notifyMessage;


    protected override async Task OnInitializedAsync()
    {
        // Get player info from session
        var nameResult = await SessionStorage.GetAsync<string>("PlayerName");
        playerName = nameResult.Success ? nameResult.Value : "Player";

        var pinResult = await SessionStorage.GetAsync<string>("GamePin");
        gamePin = pinResult.Success ? pinResult.Value : string.Empty;

        var teamIdResult = await SessionStorage.GetAsync<int>("TeamId");
        teamId = teamIdResult.Success ? teamIdResult.Value : 0;

        if (string.IsNullOrEmpty(gamePin))
        {
            Navigation.NavigateTo("/joingame");
            return;
        }

        // Load teams
        await LoadTeams();
        await LoadPlayerInGame();
        // Initialize SignalR connection
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/gamehub"))
            .Build();

        // Set up event handlers
        hubConnection.On<string>("PlayerJoined", (name) =>
        {
            InvokeAsync(() =>
            {
                if (!playersInGame.Contains(name))
                {
                    playersInGame.Add(name);
                    StateHasChanged();
                }
            });
        });

        hubConnection.On<string, int>("PlayerJoinedTeam", (name, teamId) =>
        {
            InvokeAsync(async () =>
            {
                notifyMessage = $"{name} has joined the game";
                await LoadTeams();
            });
        });

        hubConnection.On<Repository.Models.TeamModel>("TeamCreated", (team) =>
        {
            InvokeAsync(() =>
            {
                teams.Add(team);
                StateHasChanged();
            });
        });

        hubConnection.On("GameStarted", () =>
        {
            InvokeAsync(() =>
            {
                Navigation.NavigateTo("/playgame");
            });
        });

        try
        {
            await hubConnection.StartAsync();
            isConnected = true;
            await hubConnection.SendAsync("JoinGameGroup", gamePin);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error connecting to SignalR: {ex.Message}");
            isConnected = false;
        }
    }

    private async Task LoadTeams()
    {
        try
        {
            teams = await PlayerService.GetTeamsForGame(gamePin);

            // Set team name if player has joined a team
            if (teamId > 0)
            {
                var team = teams.FirstOrDefault(t => t.TeamId == teamId);
                teamName = team?.TeamName ?? string.Empty;
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading teams: {ex.Message}");
        }
    }
    private async Task LoadPlayerInGame()
    {
        try
        {
            playersInGame_temp = await PlayerService.GetPlayerInTearm(teamId);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading teams: {ex.Message}");
        }
    }
    private void JoinTeam()
    {
        Navigation.NavigateTo("/joingame/team");
    }

    private void ChangeTeam()
    {
        Navigation.NavigateTo("/joingame/team");
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.StopAsync();
            await hubConnection.DisposeAsync();
        }
    }
}