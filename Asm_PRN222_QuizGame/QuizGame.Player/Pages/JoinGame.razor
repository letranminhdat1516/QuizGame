@page "/joingame/team"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.SignalR.Client
@using QuizGame.Repository.Models
@using QuizGame.Service.BusinessModel
@using QuizGame.Service.Interface
@inject NavigationManager Navigation
@inject IPlayerService PlayerService
@inject ProtectedSessionStorage SessionStorage

<h3>Join a Team</h3>

<div class="container">
    <div class="row mb-4">
        <div class="col">
            <h4>Available Teams</h4>
            <div class="list-group">
                @foreach (var team in teams)
                {
                    <button @onclick="() => SelectTeam(team.TeamId)"
                    class="list-group-item list-group-item-action @(selectedTeamId == team.TeamId ? "active" : "")">
                        @team.TeamName <span class="badge bg-primary">@team.MemberCount members</span>
                    </button>
                }
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col">
            <div class="card">
                <div class="card-header">
                    <h5>Create a New Team</h5>
                </div>
                <div class="card-body">
                    <div class="form-group">
                        <label for="teamName">Team Name</label>
                        <input type="text" class="form-control" id="teamName" @bind="newTeamName" />
                    </div>
                    <button @onclick="CreateNewTeam" class="btn btn-success mt-2">Create Team</button>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col text-center">
            <button @onclick="JoinSelectedTeam" class="btn btn-primary" disabled="@(selectedTeamId == 0)">
                Join Selected Team
            </button>
            <button @onclick="GoBack" class="btn btn-secondary ml-2">Back</button>
        </div>
    </div>
</div>

@code {
    private string playerName = string.Empty;
    private string gamePin = string.Empty;
    private List<TeamModel> teams = new List<TeamModel>();
    private int selectedTeamId = 0;
    private string newTeamName = string.Empty;
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        //Get player name and game pin from session
        var nameResult = await SessionStorage.GetAsync<string>("PlayerName");
        playerName = nameResult.Success ? nameResult.Value : string.Empty;

        var pinResult = await SessionStorage.GetAsync<string>("GamePin");
        gamePin = pinResult.Success ? pinResult.Value : string.Empty;

        if (string.IsNullOrEmpty(playerName) || string.IsNullOrEmpty(gamePin))
        {
            Navigation.NavigateTo("/joingame");
            return;
        }

        //Connect to SignalR hub
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/gamehub"))
            .Build();

        hubConnection.On<Repository.Models.TeamModel>("TeamCreated", (team) =>
        {
            InvokeAsync(() =>
            {
                teams.Add(team);
                StateHasChanged();
            });
        });

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("JoinGameGroup", gamePin);

        //Load teams
        await LoadTeams();
    }

    private async Task LoadTeams()
    {
        try
        {
            teams = await PlayerService.GetTeamsForGame(gamePin);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading teams: {ex.Message}");
        }
    }

    private void SelectTeam(int teamId)
    {
        selectedTeamId = teamId;
    }

    private async Task CreateNewTeam()
    {
        if (string.IsNullOrEmpty(newTeamName))
            return;

        try
        {
            await PlayerService.CreateTeam(gamePin, newTeamName);
            newTeamName = string.Empty;
            await LoadTeams();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating team: {ex.Message}");
        }
    }

    private async Task JoinSelectedTeam()
    {
        if (selectedTeamId == 0)
            return;

        try
        {
            await PlayerService.JoinTeam(gamePin, playerName, selectedTeamId);
            await SessionStorage.SetAsync("TeamId", selectedTeamId);
            Navigation.NavigateTo("/waitingroom");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error joining team: {ex.Message}");
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/waitingroom");
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.StopAsync();
            await hubConnection.DisposeAsync();
        }
    }
}