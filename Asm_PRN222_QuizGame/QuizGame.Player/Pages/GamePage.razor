@page "/game"
@using Microsoft.AspNetCore.SignalR
@using QuizGame.Repository.Models
@using QuizGame.Service.BusinessModel
@using QuizGame.Service.Interface
@inject IPlayerService PlayerService
@inject IQuestionService QuestionService;
@inject IPlayerAnswerService PlayerAnswerService
@inject IHubContext<GameHub> GameHubContext
@inject NavigationManager Navigation
@inject IHttpContextAccessor HttpContextAccessor
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage SessionStorage


<h3>Game - Question</h3>

@if (!string.IsNullOrEmpty(currentQuestionText))
{
	<p><strong>Question:</strong> @currentQuestionText</p>

	<EditForm Model="@playerAnswer" OnValidSubmit="HandleAnswer">
		<DataAnnotationsValidator />
		<ValidationSummary />

		<div class="form-group">
			<label><strong>Choose your answer:</strong></label>
			<div>
				<InputRadioGroup @bind-Value="playerAnswer.Answer">
					@for (int i = 0; i < currentOptions.Length; i++)
					{
						<InputRadio id="@($"option{i}")" Value="@currentOptions[i]" />
						<label for="@($"option{i}")">@currentOptions[i]</label>

						<br />
					}
				</InputRadioGroup>
			</div>
		</div>

		<button type="submit" class="btn btn-primary">Submit Answer</button>
	</EditForm>
	<p>Time remaining: @timeRemaining seconds</p>
}
else
{
	<p>Loading question...</p>
}

@code {
	private PlayerAnswerRequest playerAnswer = new PlayerAnswerRequest();
	private string currentQuestionText = string.Empty;
	private int currentQuestionId;
	private int currentGameId;
	private int currentPlayerId;
	private	int currentQuestionNumber = 0;
	private string[] currentOptions = new string[4];
	private int timeRemaining = 30; // Mỗi câu hỏi có thời gian 30 giây
	private Timer timer;

	protected override async Task OnInitializedAsync()
	{
		// Lấy mã PIN từ session hoặc URL
		var result = await SessionStorage.GetAsync<string>("GamePin");
		string pinCode = result.Success ? result.Value : null;


		if (string.IsNullOrEmpty(pinCode))
		{
			Navigation.NavigateTo("/error");  // Điều hướng nếu không có mã PIN
			return;
		}

		// Lấy gameId từ mã PIN
		var game = await PlayerService.GetGameByPinCode(pinCode);
		if (game == null)
		{
			Navigation.NavigateTo("/error");  // Nếu không tìm thấy game
			return;
		}

		currentGameId = game.GameId;
		currentPlayerId = HttpContextAccessor.HttpContext.Session.GetInt32("PlayerId") ?? 0;
		if (game.QuizId.HasValue)
		{
			var listQuestion_Temp = await QuestionService.GetQuestionsWithQuizId(game.QuizId.Value);

			int i = 0;
			foreach (Question q in listQuestion_Temp)
			{
				var questionInGame = new QuestionInGame
					{
						GameId = currentGameId,
						QuestionId = q.QuestionId,
						QuestionNumber = i++
					};
				await QuestionService.AddQuestionInGame(questionInGame);

			}
		}
		else
		{
			Navigation.NavigateTo("/error");
		}
		await LoadQuestion();
	}

	private async Task LoadQuestion()
	{
		var question = await QuestionService.GetNextQuestionForGame(currentGameId, currentQuestionNumber);
		if (question != null)
		{
			currentQuestionId = question.QuestionId;
			currentQuestionText = question.QuestionText;
			currentOptions[0] = question.Option1;
			currentOptions[1] = question.Option2;
			currentOptions[2] = question.Option3;  
			currentOptions[3] = question.Option4;
			// Khởi tạo lại bộ đếm thời gian mỗi khi câu hỏi mới được tải
			timeRemaining = 30;
			// Start timer
			timer = new Timer(TimerTick, null, 0, 1000);  // Mỗi giây, phương thức TimerTick sẽ được gọi
		}
		else
		{
			Navigation.NavigateTo("/game/finished");
		}
	}
	private void TimerTick(object state)
	{
		if (timeRemaining > 0)
		{
			timeRemaining--;
			InvokeAsync(() => StateHasChanged());  // Cập nhật UI sau mỗi giây
		}
		else
		{
			// Nếu hết giờ, mặc định câu trả lời là sai và chuyển sang câu hỏi tiếp theo
			HandleAnswer();
		}
	}
	private async Task HandleAnswer()
	{
		try
		{
			timer?.Dispose();
			int timeTaken = 30 - timeRemaining;  // Thời gian trả lời, tính theo giây
			if (!string.IsNullOrEmpty(playerAnswer.Answer))
			{
				await PlayerAnswerService.SubmitAnswer(currentPlayerId, currentQuestionId, playerAnswer.Answer, timeTaken);
			}
			else
			{
				// Trường hợp người chơi không trả lời
				await PlayerAnswerService.SubmitAnswer(currentPlayerId, currentQuestionId, null, 30);
			}
				await LoadQuestion();
				currentQuestionNumber++;
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error: {ex.Message}");
		}
	}
	public async ValueTask DisposeAsync()
	{
		timer?.Dispose();
	}
}
