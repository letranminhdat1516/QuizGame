@page "/joingame"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using QuizGame.Service.BusinessModel
@using QuizGame.Service.Interface
@inject IPlayerService PlayerService
@inject NavigationManager Navigation
@inject IHttpContextAccessor HttpContextAccessor
@inject ProtectedSessionStorage SessionStorage
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.SignalR.Client

<h3>Join Game</h3>
@if (!string.IsNullOrEmpty(noti))
{
	<div class="alert alert-info">
		@noti
	</div>
}
<EditForm Model="@joinGameRequest" OnValidSubmit="HandleJoinGame">
	<DataAnnotationsValidator />
	<ValidationSummary />

	<div class="form-group">
		<label for="pinCode">Enter Game Pin</label>
		<InputText id="pinCode" class="form-control" @bind-Value="joinGameRequest.PinCode" />
	</div>

	<div class="form-group mb-2">
		<label for="playerName">Enter Player Name</label>
		<InputText id="playerName" class="form-control" @bind-Value="joinGameRequest.PlayerName" />
	</div>

	<button type="submit" class="btn btn-primary">Join Game</button>
</EditForm>

@code {
	private JoinGameRequest joinGameRequest = new JoinGameRequest();
	private HubConnection? hubConnection;
	private bool isConnected = false;
	private string noti;

	protected override async Task OnInitializedAsync()
	{
		hubConnection = new HubConnectionBuilder()
			.WithUrl(Navigation.ToAbsoluteUri("/gamehub"))
			.Build();

		// hubConnection.On<string>("ReceivePlayerJoinedNotification", (playerName) =>
		// 	{
		// 		Handle the notification when a player joins the game
		// 		InvokeAsync(() =>
		// 		{
		// 			Show a notification or update UI with the player's name who joined
		// 			Console.WriteLine($"{playerName} has joined the game!");
		// 		});
		// 	});
		try
		{
			await hubConnection.StartAsync();
			isConnected = true;
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error starting SignalR connection: {ex.Message}");
		}
	}
	private async Task HandleJoinGame()
	{
		try
		{
			// Gọi service để player tham gia game
			noti = await PlayerService.JoinGame(joinGameRequest.PinCode, joinGameRequest.PlayerName);
			if (!string.IsNullOrEmpty(noti))
			{
				return;
			}
			await SessionStorage.SetAsync("GamePin", joinGameRequest.PinCode);
			await SessionStorage.SetAsync("PlayerName", joinGameRequest.PlayerName);

			if (hubConnection is not null && isConnected)
			{
				await hubConnection.SendAsync("JoinGameGroup", joinGameRequest.PinCode);
				// Gửi thông báo người chơi tham gia game
				await hubConnection.SendAsync("NotifyPlayerJoined", joinGameRequest.PinCode, joinGameRequest.PlayerName);
			}
			Navigation.NavigateTo("/joingame/team");  // Điều hướng tới trang game
		}
		catch (Exception ex)
		{
			// Handle lỗi
			Console.WriteLine(ex.Message);
		}
	}
	public async ValueTask DisposeAsync()
	{
		if (hubConnection is not null)
		{
			await hubConnection.StopAsync();
			await hubConnection.DisposeAsync();
		}
	}
}
